# load dependencies and libraries
library(tidyverse)
library(readr)
library(MESS)
library(broom)
library (varhandle)
library(plotrix)
library(aomisc)
library(CausalImpact)

setwd("~/") #sets working directory

input_path <- "Dropbox/Kartik/Ongoing projects/Live cell imaging analyses/bulk analyses" #input files are stored in this folder
output_path <- "Dropbox/Kartik/Ongoing projects/Live cell imaging analyses/results" #results of the analyses are placed in this folder

list2 <- as.data.frame(list.files(path=input_path))
colnames(list2)<-c("files")

for (list_files in 1:nrow(list2)){
  # the following section loads the file
  file_uploaded <- as.character(list2[c(list_files),])
  ratio_file <- read_csv(paste0(input_path,"/",file_uploaded))
  col_names <- as.data.frame(colnames(ratio_file))
  rem_cols <- which(grepl("PMT1",col_names$`colnames(ratio_file)`)==T) #PMT1 is appended to the columns corresponding to CFP intensities, PMT3 is appended to the columns corresponding to YFP intensities
  
  ratio_file_YFP <- as.data.frame(ratio_file[,-c(rem_cols)])
  ratio_file_CFP <- as.data.frame(ratio_file[,c(1,2,rem_cols)])
  
  # the following section subtracts the background signal for YFP
  for (j in 3:(ncol(ratio_file_YFP)-1)){
    col1 <- as.matrix(ratio_file_YFP[,c(j)])
    col_back <- as.matrix(ratio_file_YFP[,c(ncol(ratio_file_YFP))]) #last column represents background
    ratio_file_YFP[,c(j)]<-col1-col_back
  }
  ratio_file_YFP[,c(ncol(ratio_file_YFP))]<-NULL
  
  # the following section subtracts the background signal for CFP
  for (j in 3:(ncol(ratio_file_CFP)-1)){
    col1 <- as.matrix(ratio_file_CFP[,c(j)])
    col_back <- as.matrix(ratio_file_CFP[,c(ncol(ratio_file_CFP))])
    ratio_file_CFP[,c(j)]<-col1-col_back
  }
  ratio_file_CFP[,c(ncol(ratio_file_CFP))]<-NULL
  
  time_add <- as.numeric(ratio_file[c(which(ratio_file$...1==1)),2]) #event marker in the first column. Columns name is "...1". Value of 1 indicates the time of treatment application 
  
  ratio_file_CFP_back <- filter(ratio_file_CFP,ratio_file_CFP$`Time [m:s]`<time_add)
  ratio_file_YFP_back <- filter(ratio_file_YFP,ratio_file_YFP$`Time [m:s]`<time_add)
  
  final_ratios <- ratio_file_YFP
 
  # the following section normalizes the traces to the mean of the baseline prior to treatment
  for (k in 3:ncol(final_ratios)){
    YFP<-ratio_file_YFP[,c(k)]
    CFP<-ratio_file_CFP[,c(k)] 
    final_ratios[,c(k)]<-CFP/YFP
    
  }
  final_ratios_original <- final_ratios
  
  # the following section calculates the CFP/YFP ratio
  for (i in 3:ncol(final_ratios)){
    col1 <- as.data.frame(final_ratios[,c(i)])
    col2 <- col1[c(1:which(ratio_file$...1==1)),]
    norm_val <- mean(col2)
    final_ratios[,c(i)]<-final_ratios[,c(i)]/norm_val
  }
  
  # the following section saves the results of the analyses to the output folder
  write.csv(final_ratios,paste0(output_path,"/ratios_corrected_",file_uploaded))
  write.csv(ratio_file_CFP,paste0(output_path,"/CFP_",file_uploaded))
  write.csv(ratio_file_YFP,paste0(output_path,"/YFP_",file_uploaded))
  
  # the following section determines if there is a drift in the baseline, corrects the drift, and saves the results
  final_ratios_baseline <- final_ratios
  final_ratios_corrected <- final_ratios
  
  for (i in 3:ncol(final_ratios)){
    full_data <- final_ratios[,c(1,2,i)]
    full_data <- filter(full_data,full_data$`Time [m:s]`<time_add)
    full_data[,c(1)]<-NULL
    
    colnames(full_data)<-c("X","Y")
    
    suppressWarnings(a<- try(nls(Y ~ SSasymp(X, yf, y0, log_alpha), data = full_data),silent = TRUE))
    if (grepl("Error",a[1])==T){
      suppressWarnings(nlsfit <- nls(Y ~ NLS.expoDecay(X, a, k),data = full_data)) 
      nlsfit_vals <- as.data.frame(tidy(nlsfit))
      full_data2 <- as.data.frame(final_ratios[,c(2,i)])
      colnames(full_data2)<-c("X","Y")
      Y0 <- as.numeric(nlsfit_vals[1,2])
      k <- as.numeric(nlsfit_vals[2,2])
      full_data2 <- full_data2 %>% mutate (Y2=(Y0)*exp((-k)*full_data2$X))
      full_data2 <- full_data2 %>% mutate (Y3=full_data2$Y/full_data2$Y2)
      # write.csv(full_data2,"Desktop/full_data2.csv")
      final_ratios_baseline[,c(i)]<-full_data2$Y2
      final_ratios_corrected[,c(i)]<-full_data2$Y3
    } else {
      suppressWarnings(nlsfit <- nls(Y ~ SSasymp(X, yf, y0, log_alpha), data = full_data))
      nlsfit_vals <- as.data.frame(tidy(nlsfit))
      full_data2 <- as.data.frame(final_ratios[,c(2,i)])
      colnames(full_data2)<-c("X","Y")
      Y0 <- as.numeric(nlsfit_vals[2,2])
      k <- exp(as.numeric(nlsfit_vals[3,2]))
      Yf <- as.numeric(nlsfit_vals[1,2])
      full_data2 <- full_data2 %>% mutate (Y2=((Y0-Yf)*exp((-1*k)*full_data2$X))+Yf)
      full_data2 <- full_data2 %>% mutate (Y3=full_data2$Y/full_data2$Y2)
      # write.csv(full_data2,"Desktop/full_data2.csv")
      final_ratios_baseline[,c(i)]<-full_data2$Y2
      final_ratios_corrected[,c(i)]<-full_data2$Y3
    }
  }
  write.csv(final_ratios_baseline,paste0(output_path,"/baseline_",file_uploaded))
  write.csv(final_ratios_corrected,paste0(output_path,"/baseline_corrected_",file_uploaded))
  
  #Following section calculates mean +/- SEM values and stores it in the output folder 
  final_ratiosb <- as.data.frame(final_ratios[,c(1,2)])
  final_ratiosc <- as.data.frame(final_ratios[,-c(1,2)])
  final_ratiosb[,c(3)]<-rowMeans(final_ratiosc)
  for (m in 1:nrow(final_ratiosc)){
    final_ratiosb[c(m),c(4)]<-std.error(t(final_ratiosc[c(m),]))
  }
  colnames(final_ratiosb)<-c("","Time [m:s]","mean","SEM")
  write.csv(final_ratiosb,paste0(output_path,"/mean_SEM_",file_uploaded))
  
  final_ratiosb <- as.data.frame(final_ratios_baseline[,c(1,2)])
  final_ratiosc <- as.data.frame(final_ratios_baseline[,-c(1,2)])
  final_ratiosb[,c(3)]<-rowMeans(final_ratiosc)
  for (m in 1:nrow(final_ratiosc)){
    final_ratiosb[c(m),c(4)]<-std.error(t(final_ratiosc[c(m),]))
  }
  colnames(final_ratiosb)<-c("","Time [m:s]","mean","SEM")
  write.csv(final_ratiosb,paste0(output_path,"/baseline_mean_SEM_",file_uploaded))
  
  final_ratiosb <- as.data.frame(final_ratios_corrected[,c(1,2)])
  final_ratiosc <- as.data.frame(final_ratios_corrected[,-c(1,2)])
  final_ratiosb[,c(3)]<-rowMeans(final_ratiosc)
  for (m in 1:nrow(final_ratiosc)){
    final_ratiosb[c(m),c(4)]<-std.error(t(final_ratiosc[c(m),]))
  }
  colnames(final_ratiosb)<-c("","Time [m:s]","mean","SEM")
  write.csv(final_ratiosb,paste0(output_path,"/baseline_corrected_mean_SEM_",file_uploaded))
  
  #the following section calculates the integrated changes in Laconic ratios and stores the results in output folder
  additions <-as.data.frame(final_ratios_corrected[,c(1)])
  colnames(additions)<-c("additions")
  additions <- as.data.frame(additions[-c(which(is.na(additions$additions)==T)),])
  colnames(additions)<-c("additions")
  
  additions <- max(additions$additions)
  area_list1 <- as.data.frame(matrix(0,nrow=(ncol(final_ratios_corrected)-2),ncol=1))
  for (x in 1:additions){
    area_list <- as.data.frame(matrix(0,nrow=0,ncol=1))
    for (k in 3:ncol(final_ratios_corrected)){
      if (additions==1){
        col1 <- as.data.frame(final_ratios_corrected[c(which(final_ratios_corrected$...1==x):nrow(final_ratios_corrected)),c(2,k)])
        colnames(col1)<-c("time","ratio")
        precol1 <- as.data.frame(final_ratios_corrected[c(1:(which(final_ratios_corrected$...1==x)-1)),c(2,k)])
        colnames(precol1)<-c("time","ratio")
        precol2 <- as.data.frame(rbind(precol1,col1))
        pre.period <- c(1,nrow(precol1))
        post.period <- c((nrow(precol1)+1),nrow(precol2))
        precol2 <- as.data.frame(precol2[,order(ncol(precol2):1)])
        impact <- CausalImpact(precol2, pre.period, post.period)
        impact_vals <- as.data.frame(impact$series)
        impact_vals<- as.data.frame(impact_vals[-c(1:nrow(precol1)),])
        
        col1 <- col1 %>% mutate (base=impact_vals$point.pred) 
        col1 <- unfactor(col1)
        time1 <- as.numeric(min(col1$time))
        time2 <- as.numeric(max(col1$time))
        area1 <- auc(col1$time,col1$ratio,from = time1,to=time2)
        area2 <- auc(col1$time,col1$base,from = time1,to=time2)
        area <- as.data.frame((area1-area2)/nrow(col1))
        colnames(area)<-c("area")
        colnames(area_list)<-colnames(area)
        area_list <- as.data.frame(rbind(area_list,area))
      } else{
        if (x==1){
          col1 <- as.data.frame(final_ratios_corrected[c(which(final_ratios_corrected$...1==x):(which(final_ratios_corrected$...1==(x+1))-1)),c(2,k)])
          colnames(col1)<-c("time","ratio")
          precol1 <- as.data.frame(final_ratios_corrected[c((which(final_ratios_corrected$...1==x)-12):(which(final_ratios_corrected$...1==x)-1)),c(2,k)])
          colnames(precol1)<-c("time","ratio")
          precol2 <- as.data.frame(rbind(precol1,col1))
          pre.period <- c(1,nrow(precol1))
          post.period <- c((nrow(precol1)+1),nrow(precol2))
          precol2 <- as.data.frame(precol2[,order(ncol(precol2):1)])
          impact <- CausalImpact(precol2, pre.period, post.period)
          impact_vals <- as.data.frame(impact$series)
          impact_vals<- as.data.frame(impact_vals[-c(1:nrow(precol1)),])
          
          col1 <- col1 %>% mutate (base=impact_vals$point.pred)
          col1 <- unfactor(col1)
          time1 <- as.numeric(min(col1$time))
          time2 <- as.numeric(max(col1$time))
          area1 <- auc(col1$time,col1$ratio,from = time1,to=time2)
          area2 <- auc(col1$time,col1$base,from = time1,to=time2)
          area <- as.data.frame((area1-area2)/nrow(col1))
          colnames(area)<-c("area")
          colnames(area_list)<-colnames(area)
          area_list <- as.data.frame(rbind(area_list,area))
        } else{
          col1 <- as.data.frame(final_ratios_corrected[c(which(final_ratios_corrected$...1==x):nrow(final_ratios_corrected)),c(2,k)])
          colnames(col1)<-c("time","ratio")
          precol1 <- as.data.frame(final_ratios_corrected[c(which(final_ratios_corrected$...1==(x-1)):(which(final_ratios_corrected$...1==x)-1)),c(2,k)])
          colnames(precol1)<-c("time","ratio")
          precol2 <- as.data.frame(rbind(precol1,col1))
          pre.period <- c(1,nrow(precol1))
          post.period <- c((nrow(precol1)+1),nrow(precol2))
          precol2 <- as.data.frame(precol2[,order(ncol(precol2):1)])
          impact <- CausalImpact(precol2, pre.period, post.period)
          impact_vals <- as.data.frame(impact$series)
          impact_vals<- as.data.frame(impact_vals[-c(1:nrow(precol1)),])
          
          col1 <- col1 %>% mutate (base=impact_vals$point.pred) 
          col1 <- unfactor(col1)
          time1 <- as.numeric(min(col1$time))
          time2 <- as.numeric(max(col1$time))
          area1 <- auc(col1$time,col1$ratio,from = time1,to=time2)
          area2 <- auc(col1$time,col1$base,from = time1,to=time2)
          area <- as.data.frame((area1-area2)/nrow(col1))
          colnames(area)<-c("area")
          colnames(area_list)<-colnames(area)
          area_list <- as.data.frame(rbind(area_list,area))
        }
      }
    }
    area_list1 <- as.data.frame(cbind(area_list1,area_list))
  }
  area_list1[,c(1)]<-NULL
  write.csv(area_list1,paste0(output_path,"/AUC_per_time_",file_uploaded))
}



